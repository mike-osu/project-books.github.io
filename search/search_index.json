{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 Welcome to the documentation site for Project Books ! This site brings together documents that apply to all of our projects (see below) in one place. Book Project \u00b6 The Book Project is currently a book tracker. This allows readers to track books they would like to read, are currently reading, have read or did not finish. We're looking to expand the Book Project to become a book platform for readers where they can interact with other readers to find the next good book to read. We're using Java with Spring Boot, React with TypeScript, PostgreSQL and other technologies to build this. We started the Book Project out of a desire for a substantially better Goodreads, but we're also looking to redefine the experience at every step. For more information, see our vision for the Book Project and our FAQs . Books API \u00b6 The Books API is a GraphQL API that stores books, authors, publishers and more. It is written in Java using Spring Boot and the DGS framework. The Books API is a sibling and supporting project to the Book Project . However, we have also designed it to be standalone. Curating and maintaining a large and high-quality selection of books is hard. We hope that by providing a good, easy-to-use API, others who also consume our API may want to contribute back by adding books to our collection.","title":"Home"},{"location":"#home","text":"Welcome to the documentation site for Project Books ! This site brings together documents that apply to all of our projects (see below) in one place.","title":"Home"},{"location":"#book-project","text":"The Book Project is currently a book tracker. This allows readers to track books they would like to read, are currently reading, have read or did not finish. We're looking to expand the Book Project to become a book platform for readers where they can interact with other readers to find the next good book to read. We're using Java with Spring Boot, React with TypeScript, PostgreSQL and other technologies to build this. We started the Book Project out of a desire for a substantially better Goodreads, but we're also looking to redefine the experience at every step. For more information, see our vision for the Book Project and our FAQs .","title":"Book Project"},{"location":"#books-api","text":"The Books API is a GraphQL API that stores books, authors, publishers and more. It is written in Java using Spring Boot and the DGS framework. The Books API is a sibling and supporting project to the Book Project . However, we have also designed it to be standalone. Curating and maintaining a large and high-quality selection of books is hard. We hope that by providing a good, easy-to-use API, others who also consume our API may want to contribute back by adding books to our collection.","title":"Books API"},{"location":"about/core-principles/","text":"Our core principles are things that we are going to stick to (and should be accountable if we ever violate). As time goes on, we may also add new principles if they are especially important to us. User \u00b6 The user at the heart of our design. A lot of people may say this, but when we say it, we mean it. How can you believe us? We're not here to make a profit -- in fact, we don't make any money whatsoever. We're just doing this for the fun of it Here's a couple of examples: - Create a terms & conditions document that is meant to be read (short, concise and free of legal jargon) - Listen to what our users want and act on it - Make the app quick Some users may like the social network experience -- seeing what their 'real-life' friends are reading. But not all do. Social networks also have associations with privacy concerns. How are we different? For starters, we're not pushing the social network experience on anyone. We're making it opt-in; by default, you can just use it a service to discover and catalogue books without any of the distracting social network elements. Privacy \u00b6 We're spooked by what and how much data the big tech companies collect, so we're not going to make the same mistakes. A simple test here for us is if we didn't create the Book Project, would we be comfortable using it? We'll be collecting as little information as possible from our users Sometimes, we're led to believe that user privacy comes as a compromise to building an amazing service. We don't buy that. Here's some things that we're against: - Adverts - Asking for too much information like a user's address or full name - Tracking cookies - Google's reCAPTCHA, Google Analytics, etc. - Sign in with Google or Facebook Transparency is key here. Whatever we do collect will be documented in a concise easy-to-read format. If our privacy policy is pages long, we don't see that as being transparent. It needs to be easily and quickly digestible, otherwise few people will read it. Simplicity \u00b6 Simple but feature-rich & customisable: Goodreads has a lot of customisation, but it sometimes comes at the expense of simplicity. When there is a trade-off to be made, simplicity should be preferred over customisation Balancing being opinionated in what the user needs with allowing the user to customise things to their liking Good-looking UI \u00b6 Since appearance is in the eye of the beholder, it will hard, if not impossible, to please everyone. We're trying to make it look as good as possible for as many people as possible. Solidly built \u00b6 The other principles are mostly about the end-user. This principle is about our code. Write good, clean code that's maintainable. Includes frequent refactoring and adhering to principles like SOLID Use the best tool for the job, not just sticking to what we currently know E.g. Vaadin is not the best framework for us, so're switching to React We may slip on this from time to time. That's fine as long as we pick ourselves back up and ensure we're constantly learning how to write better code and design a better system Welcoming \u00b6 We're building a welcoming community both from the open-source development viewpoint but also within the app. Changes \u00b6 In the interest of transparency, we will list and briefly explain any changes to our core principles here. We initially planned to allow for both signing up with a username (for privacy reasons) or an email address. However, for the time being, we've decided to only allow registering with an email address. This is to make it easier for us to verify accounts by sending confirmation emails, which can help mitigate against people creating 'fake' accounts. It can also help users reset their password. However, if there is sufficient demand for signing up with a username instead of an email address, we will revisit this decision and look at how we can handle our concerns above. We are still committed to our users' privacy.","title":"Core principles"},{"location":"about/core-principles/#user","text":"The user at the heart of our design. A lot of people may say this, but when we say it, we mean it. How can you believe us? We're not here to make a profit -- in fact, we don't make any money whatsoever. We're just doing this for the fun of it Here's a couple of examples: - Create a terms & conditions document that is meant to be read (short, concise and free of legal jargon) - Listen to what our users want and act on it - Make the app quick Some users may like the social network experience -- seeing what their 'real-life' friends are reading. But not all do. Social networks also have associations with privacy concerns. How are we different? For starters, we're not pushing the social network experience on anyone. We're making it opt-in; by default, you can just use it a service to discover and catalogue books without any of the distracting social network elements.","title":"User"},{"location":"about/core-principles/#privacy","text":"We're spooked by what and how much data the big tech companies collect, so we're not going to make the same mistakes. A simple test here for us is if we didn't create the Book Project, would we be comfortable using it? We'll be collecting as little information as possible from our users Sometimes, we're led to believe that user privacy comes as a compromise to building an amazing service. We don't buy that. Here's some things that we're against: - Adverts - Asking for too much information like a user's address or full name - Tracking cookies - Google's reCAPTCHA, Google Analytics, etc. - Sign in with Google or Facebook Transparency is key here. Whatever we do collect will be documented in a concise easy-to-read format. If our privacy policy is pages long, we don't see that as being transparent. It needs to be easily and quickly digestible, otherwise few people will read it.","title":"Privacy"},{"location":"about/core-principles/#simplicity","text":"Simple but feature-rich & customisable: Goodreads has a lot of customisation, but it sometimes comes at the expense of simplicity. When there is a trade-off to be made, simplicity should be preferred over customisation Balancing being opinionated in what the user needs with allowing the user to customise things to their liking","title":"Simplicity"},{"location":"about/core-principles/#good-looking-ui","text":"Since appearance is in the eye of the beholder, it will hard, if not impossible, to please everyone. We're trying to make it look as good as possible for as many people as possible.","title":"Good-looking UI"},{"location":"about/core-principles/#solidly-built","text":"The other principles are mostly about the end-user. This principle is about our code. Write good, clean code that's maintainable. Includes frequent refactoring and adhering to principles like SOLID Use the best tool for the job, not just sticking to what we currently know E.g. Vaadin is not the best framework for us, so're switching to React We may slip on this from time to time. That's fine as long as we pick ourselves back up and ensure we're constantly learning how to write better code and design a better system","title":"Solidly built"},{"location":"about/core-principles/#welcoming","text":"We're building a welcoming community both from the open-source development viewpoint but also within the app.","title":"Welcoming"},{"location":"about/core-principles/#changes","text":"In the interest of transparency, we will list and briefly explain any changes to our core principles here. We initially planned to allow for both signing up with a username (for privacy reasons) or an email address. However, for the time being, we've decided to only allow registering with an email address. This is to make it easier for us to verify accounts by sending confirmation emails, which can help mitigate against people creating 'fake' accounts. It can also help users reset their password. However, if there is sufficient demand for signing up with a username instead of an email address, we will revisit this decision and look at how we can handle our concerns above. We are still committed to our users' privacy.","title":"Changes"},{"location":"about/faq/","text":"This page contains answers to frequently asked questions (some of which have been asked in person). Why make users add books manually? This is tedious. Why not use something like an ISBN API so that users don't have to fill in lots of details for all of the books they want to store? This was considered before starting the project. However, at present, a sufficiently good API for books has not been found. The search results aren't that good. Besides, adding manual input is only the first part of the process. Platforms like Goodreads have this, too: if no such book exists in the catalogue, users can add their own books. We are currently working on curating our own library catalogue of books that users can search from: the Books API . We want to have users be able to search for books from a large catalogue as well as add their own books. It\u2019s been done before, and Goodreads does a fair job at it. Why reinvent the wheel? We're not reinventing something. We're not making a carbon-copy clone of Goodreads or some other platform. What we are doing is creating something that addresses some of the popular concerns about Goodreads (see next question). In short, while we do think Goodreads is a good platform, we think it could be so much better. So how is the Book Project different to Goodreads? Open source: it's a collaborative effort. Alone, a single developer may not be able to compete with Goodreads. Together, we can. What this hopefully means for the end-user is that we're focused on building something incredible purely because we want to make something amazing (and we're not driven by profit). We hope this translates into developing features at a much quicker rate than closed-source software like Goodreads. Clean design: the Goodreads UI is outdated. Many have been asking for a design refresh for some time. By clean design, we mean a) it looks good and b) it's simple. Community first: we want to listen to our users and build the features they're asking for. In the case of Goodreads, in addition to a better design, users have been asking for features such as half stars (which we trump by having a more granular ten-point scale). We're also looking into some other flaws of Goodreads such as having to use HTML for reviews (not very user-friendly) and spammy reviews. And these are just some examples of the many, many requested features that have been lingering in the ether for years. Quick: the Goodreads website is OK, but the mobile apps are slow. Privacy first: Amazon doesn't have the best reputation when it comes to privacy and, unfortunately, Amazon owns Goodreads. From something as seemingly innocuous as the books someone likes, a lot can be extrapolated (see the BBC 'Secrets of Silicon Valley' documentary clip ). We aim to collect as little data as possible, we're going to be very transparent about what we do collect and we won't do anything nefarious with your data. When will the Book Project be deployed to real users? Soon, we hope! We don't want to rush into publishing something that we don't believe is production-quality. This means that we need to fix any bugs, add a lot more unit tests to help us catch bugs and generally improve the quality of our code.","title":"FAQ"},{"location":"about/vision/","text":"What will the Book Project be? \u00b6 We are building a hub for readers, authors and publishers. Fundamentally, we want to improve book discovery. It should be easy to find new books to read that match our users' interests. As a hub, we want our web app to be the single place that our users go to find the next great book and also to engage with authors, publishers and other readers. What we won't be \u00b6 We're not another Goodreads or LibraryThing. We're rethinking what it means to be a book hub from the ground up and to provide a service that our users love. In other words, we're not producing a clone of an existing app. We're working on designing the best experience for anyone who loves books.","title":"Vision"},{"location":"about/vision/#what-will-the-book-project-be","text":"We are building a hub for readers, authors and publishers. Fundamentally, we want to improve book discovery. It should be easy to find new books to read that match our users' interests. As a hub, we want our web app to be the single place that our users go to find the next great book and also to engage with authors, publishers and other readers.","title":"What will the Book Project be?"},{"location":"about/vision/#what-we-wont-be","text":"We're not another Goodreads or LibraryThing. We're rethinking what it means to be a book hub from the ground up and to provide a service that our users love. In other words, we're not producing a clone of an existing app. We're working on designing the best experience for anyone who loves books.","title":"What we won't be"},{"location":"conduct/code-of-conduct-resolutions/","text":"Code of conduct resolutions \u00b6 This document details how we will handle possible code of conduct violations. As with our code of conduct , we may be update this document, so please ensure you stay up-to-date with any changes. Level 1: no further action \u00b6 A level 1 resolution occurs when we conclude that there was no violation. Alternatively, we could come to this decision if the person who violated the code of conduct has genuinely and voluntarily (i.e. without the project owner asking them to) apologised and pledged not to commit the violation again. In this case, the project owner will confirm that they have witnessed the offence and that no further action is required as the offender has already apologised. This option is at the discretion of the project owner. Level 2: a public reprimand \u00b6 We may issue a public reprimand in response to a public violation. Think of this as a warning. If the offender becomes hostile after a public reprimand, this will escalate to a level 3 resolution. from our projects. Level 3: a temporary ban \u00b6 A level 3 resolution is a temporary ban from our repositories. Consider this to be us providing time for the offender to \"cool off\". The transgressor will be banned if they have reoffended (even if from a lower-level violation). Level 4: a permanent ban \u00b6 If an offender has reoffended after being temporarily banned, we may decide to exclude them from all of our projects permanently. A permanent ban is at the discretion of the project owner. It depends on whether we consider the offence intentional and whether the offender issued a genuine apology. Complaints about bans \u00b6 You should not file complaints about bans on any of our repositories but instead sent them to bookproject@madebykarankumar.com, where the project owner will promptly review it. Adapted from the Django code of conduct and the Rust code of conduct .","title":"Code of conduct resolutions"},{"location":"conduct/code-of-conduct-resolutions/#code-of-conduct-resolutions","text":"This document details how we will handle possible code of conduct violations. As with our code of conduct , we may be update this document, so please ensure you stay up-to-date with any changes.","title":"Code of conduct resolutions"},{"location":"conduct/code-of-conduct-resolutions/#level-1-no-further-action","text":"A level 1 resolution occurs when we conclude that there was no violation. Alternatively, we could come to this decision if the person who violated the code of conduct has genuinely and voluntarily (i.e. without the project owner asking them to) apologised and pledged not to commit the violation again. In this case, the project owner will confirm that they have witnessed the offence and that no further action is required as the offender has already apologised. This option is at the discretion of the project owner.","title":"Level 1: no further action"},{"location":"conduct/code-of-conduct-resolutions/#level-2-a-public-reprimand","text":"We may issue a public reprimand in response to a public violation. Think of this as a warning. If the offender becomes hostile after a public reprimand, this will escalate to a level 3 resolution. from our projects.","title":"Level 2: a public reprimand"},{"location":"conduct/code-of-conduct-resolutions/#level-3-a-temporary-ban","text":"A level 3 resolution is a temporary ban from our repositories. Consider this to be us providing time for the offender to \"cool off\". The transgressor will be banned if they have reoffended (even if from a lower-level violation).","title":"Level 3: a temporary ban"},{"location":"conduct/code-of-conduct-resolutions/#level-4-a-permanent-ban","text":"If an offender has reoffended after being temporarily banned, we may decide to exclude them from all of our projects permanently. A permanent ban is at the discretion of the project owner. It depends on whether we consider the offence intentional and whether the offender issued a genuine apology.","title":"Level 4: a permanent ban"},{"location":"conduct/code-of-conduct-resolutions/#complaints-about-bans","text":"You should not file complaints about bans on any of our repositories but instead sent them to bookproject@madebykarankumar.com, where the project owner will promptly review it. Adapted from the Django code of conduct and the Rust code of conduct .","title":"Complaints about bans"},{"location":"conduct/code-of-conduct/","text":"Code of Conduct \u00b6 Please ensure that you remain familiar with this document as it may change from time to time. Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualised language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting If someone has a problem with something that you said, please don't get defensive. Instead, stop doing what they complained about, even if you don't think you did anything wrong or if what you said was misinterpreted. It may be the case that you could have better communicated what you said. Ultimately, we're trying to make this a place where we can all get along. Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies in project spaces (e.g. the wiki, pull requests, any documentation and code) and in public spaces (such as our Slack workspace) when an individual is representing the project or its community. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project owner 1 at bookproject@madebykarankumar.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies will be posted in due course. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. For more information about how violations will be handled, see our resolutions document . Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq A part of the 'our standards' section has been adapted from the Rust code of conduct . Notes \u00b6 If the leadership expands to a team, this will be changed to email addresses of two different maintainers (in case the complaint is at the project owner) \u21a9","title":"Code of Conduct"},{"location":"conduct/code-of-conduct/#code-of-conduct","text":"Please ensure that you remain familiar with this document as it may change from time to time.","title":"Code of Conduct"},{"location":"conduct/code-of-conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"conduct/code-of-conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualised language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting If someone has a problem with something that you said, please don't get defensive. Instead, stop doing what they complained about, even if you don't think you did anything wrong or if what you said was misinterpreted. It may be the case that you could have better communicated what you said. Ultimately, we're trying to make this a place where we can all get along.","title":"Our Standards"},{"location":"conduct/code-of-conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"conduct/code-of-conduct/#scope","text":"This Code of Conduct applies in project spaces (e.g. the wiki, pull requests, any documentation and code) and in public spaces (such as our Slack workspace) when an individual is representing the project or its community.","title":"Scope"},{"location":"conduct/code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project owner 1 at bookproject@madebykarankumar.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies will be posted in due course. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. For more information about how violations will be handled, see our resolutions document .","title":"Enforcement"},{"location":"conduct/code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq A part of the 'our standards' section has been adapted from the Rust code of conduct .","title":"Attribution"},{"location":"conduct/code-of-conduct/#notes","text":"If the leadership expands to a team, this will be changed to email addresses of two different maintainers (in case the complaint is at the project owner) \u21a9","title":"Notes"},{"location":"design/design-tools/","text":"We are currently using the following software in our UI/UX team: Tool What for Figma Mockups Jira Task tracking Google Drive (Google Docs, Google Slides and Google Sheets) UX research Slack Communication Zoom Communication","title":"Tools we use"},{"location":"design/design/","text":"What is the Book Project? \u00b6 Currently, it's a book tracker. It lets users track books they would like to read, are currently reading, have read and did not finish (we call these 'shelves', and we also have user-defined shelves). At present, users have to enter the information by hand. Manually entering in information is tedious. We're also curating a catalogue of books to search from (the 'Books API'). It'll be hard to create a sizeable quality library of books to choose from, so we still want users to have the option to add in a book if it doesn't exist in our catalogue. Over time, hopefully, users will use this feature less and less as the size of our catalogue grows, but this feature will likely stay. Where is it heading? \u00b6 In the short term, we want to publish our web app to real users as soon as possible. This will allow us to find out what works and what doesn't. Crucially, we want to keep our users at the heart of what we do, so new features will largely be dictated by what our users want (as well as trying to meet unarticulated but desired needs!). Ultimately, we want to expand from being a book tracker to being a book platform. Users will see what their friends are reading and connect with like-minded individuals to form reading groups. Moreover, there is a lot of scope: we could create mobile apps, a recommendation algorithm for recommending books, etc. For more information, have a look at our vision document . Why design is important to us \u00b6 One of the primary reasons for starting the project was to address the concerns users had with Goodreads's outdated design. We want to create a clean, modern and simple design that our users love. Partially, this is UI, but this is also UX. Our web app needs to be intuitive and satisfy the demands of our users. We don't see UI/UX design as a one-off project. Rather, it's a continuous process to improve our web app. From a development perspective, quite a lot! Take a look on GitHub . Design team \u00b6 We also have a small UI/UX team that researches how we can create a compelling user experience for our users. Name UI or UX? Focus Braja UI Mockups Reza UX Margo UX Sriram UX Diana UX Danni UI Mockups Alumni: Olivia : designed our logo and worked on our mockups Elena was a UX researcher Iris: UX researcher What has been done so far \u00b6 See here for the mockups we are designing for our second version. Please note that these mockups are an early draft. We are still working on them and things may change substantially. Our third version will then incorporate our UX research. We have recently formed a small UI/UX team, so it's still early days. We're currently conducting competitive analysis, defining our goals and our success metrics. Commitment \u00b6 We're all volunteers that work on this in addition to our day jobs/university work/other commitments. There isn't a company; we're only a group of people looking to build an incredible product. We don't make any money whatsoever, and none of us gets paid. This means that we won't be able to pay you. Open source is well established in the software development world, and we hope that you'll be able to get something out of it. In terms of commitment, you're free to put in as little or as much time as you'd like. Equally, if you decide that this isn't for you, you're more than happy to leave at any time. Given that this is voluntary, we avoid imposing any deadlines. All we ask for in return is to keep us updated on what you are working on. If a task is taking longer than expected for whatever reason, that's fine, but please do let us know. Interested in joining? \u00b6 Reach out to @knjk04 on our Slack workspace","title":"Design"},{"location":"design/design/#what-is-the-book-project","text":"Currently, it's a book tracker. It lets users track books they would like to read, are currently reading, have read and did not finish (we call these 'shelves', and we also have user-defined shelves). At present, users have to enter the information by hand. Manually entering in information is tedious. We're also curating a catalogue of books to search from (the 'Books API'). It'll be hard to create a sizeable quality library of books to choose from, so we still want users to have the option to add in a book if it doesn't exist in our catalogue. Over time, hopefully, users will use this feature less and less as the size of our catalogue grows, but this feature will likely stay.","title":"What is the Book Project?"},{"location":"design/design/#where-is-it-heading","text":"In the short term, we want to publish our web app to real users as soon as possible. This will allow us to find out what works and what doesn't. Crucially, we want to keep our users at the heart of what we do, so new features will largely be dictated by what our users want (as well as trying to meet unarticulated but desired needs!). Ultimately, we want to expand from being a book tracker to being a book platform. Users will see what their friends are reading and connect with like-minded individuals to form reading groups. Moreover, there is a lot of scope: we could create mobile apps, a recommendation algorithm for recommending books, etc. For more information, have a look at our vision document .","title":"Where is it heading?"},{"location":"design/design/#why-design-is-important-to-us","text":"One of the primary reasons for starting the project was to address the concerns users had with Goodreads's outdated design. We want to create a clean, modern and simple design that our users love. Partially, this is UI, but this is also UX. Our web app needs to be intuitive and satisfy the demands of our users. We don't see UI/UX design as a one-off project. Rather, it's a continuous process to improve our web app. From a development perspective, quite a lot! Take a look on GitHub .","title":"Why design is important to us"},{"location":"design/design/#design-team","text":"We also have a small UI/UX team that researches how we can create a compelling user experience for our users. Name UI or UX? Focus Braja UI Mockups Reza UX Margo UX Sriram UX Diana UX Danni UI Mockups Alumni: Olivia : designed our logo and worked on our mockups Elena was a UX researcher Iris: UX researcher","title":"Design team"},{"location":"design/design/#what-has-been-done-so-far","text":"See here for the mockups we are designing for our second version. Please note that these mockups are an early draft. We are still working on them and things may change substantially. Our third version will then incorporate our UX research. We have recently formed a small UI/UX team, so it's still early days. We're currently conducting competitive analysis, defining our goals and our success metrics.","title":"What has been done so far"},{"location":"design/design/#commitment","text":"We're all volunteers that work on this in addition to our day jobs/university work/other commitments. There isn't a company; we're only a group of people looking to build an incredible product. We don't make any money whatsoever, and none of us gets paid. This means that we won't be able to pay you. Open source is well established in the software development world, and we hope that you'll be able to get something out of it. In terms of commitment, you're free to put in as little or as much time as you'd like. Equally, if you decide that this isn't for you, you're more than happy to leave at any time. Given that this is voluntary, we avoid imposing any deadlines. All we ask for in return is to keep us updated on what you are working on. If a task is taking longer than expected for whatever reason, that's fine, but please do let us know.","title":"Commitment"},{"location":"design/design/#interested-in-joining","text":"Reach out to @knjk04 on our Slack workspace","title":"Interested in joining?"},{"location":"development/contributing/","text":"Contributing \u00b6 Thank you for taking an interest in contributing! Please note that by contributing to any of our projects, you are expected to adhere to this contributing document. Please also ensure that you remain familiar with this contributing document as it may change from time to time. Code of Conduct \u00b6 By contributing to this project, you are expected to adhere to our Code of Conduct . Ways to contribute \u00b6 Code: adding new features, fixing bugs and general refactoring to name a few Code reviews: either offering to review a pull request on Slack or if you see a pull request and think the code could be improved, feel free to offer suggestions on how to do so. This can help improve our code quality and is much appreciated! Before reviewing code, please ensure you are familiar with and understand our code reviews document Issues and pull requests labelled with needs-repro have yet to be reproduced. If you're able to reproduce it, letting us know would help a lot Our test coverage is low, so we need a lot more tests, particularly the areas that are undertested or not covered at all Documentation: improvements (including fixing typos!) to files such as our READMEs, any wiki page, any of our style guides, comments in source files, this contributing document or the code of conduct . Design: helping to design the UI and UX of the web app through prototypes (such as wireframes and drawings) Feedback: we're eager to find new ways to improve, so please do let us know! Start a new idea discussion on GitHub Triage: help us to triage issues and pull requests In addition to the above, you can get involved in shaping the future of the project over on Slack. Receiving a response \u00b6 We aim to respond to all messages (on Slack and on GitHub) within seven days. Similarly, we aim to review all pull requests within seven days of receiving it in a review state. If you haven't received a response, feel free to mention @knjk04 or get in touch on Slack. Open-ended discussions \u00b6 Open-ended discussions are best made over our public #help channel on our Slack workspace. Unless specified otherwise, this applies when you're not assigned to the issue at hand. Examples of when to take a discussion over to Slack: If you disagree with an issue (e.g. if you don't think it's needed or there is a better way of doing something) If you would like to make comments, suggestions or amendments to our style guide If you would like to comment on the overall direction of the project The reason for this is because we don't want to make discussions on issues or pull requests longer than they need to be. For example, creating an open-ended discussion on a pull-request code review can distract away from the actual code review and confuse the contributor assigned to the pull request (i.e. it's off-topic). Before making changes \u00b6 Tell us which issue you want to work on \u00b6 Note This applies to both code and documentation changes If an issue already exists for what you want to work and it is unassigned, and it is not labelled as blocked , feel free to let us know that you want to work on it. We can then assign you to it. If an issue doesn't already exist, please create one and then let us know that you are happy to work on it. Letting us know which issue you want to work on before working on it helps to minimise the chances of duplicated work. New contributors assigned to at most one issue at a time \u00b6 If you have a new contributor (have not yet contributed to the project), we ask that you only request to be assigned to one issue. Only once your corresponding pull has been merged can you request to be assigned to other issues (more than one). The reason for this restriction is because we have had people ask to be assigned to an issue but then, for whatever reason, not work on it. We don't want to find ourselves in a situation where multiple issues are assigned to one person who then does not deliver. We want to keep our project alive at a good pace. Discuss your implementation approach \u00b6 After having been assigned to a ticket, please discuss your implementation approach with us first before working on it. It may be the case that you make a good change, but it isn't what we are looking for. Moreover, there may be a better way of doing something. This step can help to save both your time and our time in the long run :) Ensure your email address on your commits are correct \u00b6 If your email address that you are committing with does not match the email address associated with your GitHub account, you won't show up as a contributor on our repository or on your profile. In the above image, the contributor's avatar is the same as the avatar on their GitHub profile. In addition, their username (highlighted) is a link to their GitHub profile. This won't be the case if you haven't set things up correctly. You can check the email address in your git config with the following command: 1 $ git config user.email You can then ensure that this matches the email address on your GitHub account (look in 'Settings'). For more information, see GitHub's documentation page on 'Why are my contributions not showing up on my profile?' . See how to rewrite pushed commits to use a different email address . Workflow \u00b6 Please follow the process below: Tell us which issue you want to work on Discuss your implementation approach with us Fork the repository Create a new branch off main (unless the corresponding issue says otherwise). Your branch should have a descriptive branch name (that corresponds to the relevant issue) (e.g. add-styleguide ) Please do not use quotation marks or apostrophes in your branch name Bring your branch level with the branch you're going to be branching into before submitting a pull request (we recommend rebasing) i.e. if you're going to be branch off main , then rebase new changes from main onto your branch Submit a pull request to merge into the branch specified on the issue (or main if a branch is not specified) Commit messages \u00b6 Use the present tense (e.g. \"add converter\", not \"added converter\") Ensure your commit messages are descriptive (i.e. a commit message should effectively summarise what change(s) you made) In line with this, you may want to break up your contribution into smaller commits Generally speaking, the default GitHub commit messages (e.g. add [file] or update [file] ) are not sufficient One problem per patch \u00b6 For every patch (i.e. pull request) you make, please ensure it solves one problem. If you want to solve multiple problems, please spread them across multiple patches -- one patch per problem. This makes it easier to keep track of what changes were made in what branch or pull request when looking back. Additionally, it makes code reviews go a lot quicker and smoother. Syncing your fork \u00b6 You can keep your fork up-to-date by first creating a remote for the upstream and then syncing your fork . Code contributions \u00b6 Please adhere to our relevant code style guide(s) for the issue you are working on. Before submitting a pull request, run the unit tests locally and ensure they pass. Writing tests \u00b6 Generally speaking, if you're working on a new feature (any issue with the enhancement label ) or fixing a bug , please also write tests. If you need a hand with this, we can help. We highly recommend following a test-driven development approach. New files \u00b6 If you're adding a new file, please ensure to copy the contents of our copyright file verbatim (use the latest version on the main branch). Pull requests \u00b6 If you've opened a pull request but it is not yet ready for a review, please convert it to a draft. Otherwise, we may help you out by adding to your branch while you're also working on it if the changes needed are small or if the work needs to be completed quickly (e.g. if it is a high priority bug or if it is blocking other work). The same applies for pull requests where we've requested changes -- mark it as a draft until you're ready for another review. Merge conflicts \u00b6 We expect you to resolve any merge conflicts that appear when you have a pull request. This includes when you first create the pull request and at any point later on if merge conflicts appear before your pull request is merged. This is to minimise the time spent reviewers spend reviewing pull requests, but it is may also provide you with the opportunity to change or adapt your work based on new changes. Resolving conversations \u00b6 It is best to leave resolving a conversation (e.g. a review comment) to the reviewer that created it. This way, they can check for themselves whether the suggestion was implemented as desired. Stale issues & pull requests \u00b6 If you have been assigned to an issue and we have not heard back to you for a week (either through a message or seeing a pull request you made), we will send a friendly message asking whether everything is OK and whether you need a hand. If you need more time, the work is non-urgent and is not blocking anyone, that's completely fine, just let us know. If possible, try to let us know how long it will take you to submit a ready-to-review pull request. If we have not heard back from you one week after our friendly reminder (i.e. two weeks after you were first assigned to the issue), we will unassign you from the issue. This is so that we can assign someone else to the issue. Pull requests are similar. We will send a friendly reminder after one week of receiving the pull request or receiving your last message. If we don't hear back from you, we will close the pull request and label it as stale . For urgent work, such as fixing important bugs or work that is blocking others, a similar process will be followed but with shorter timescales. Exactly how long depends on the severity of the stale work. Where possible, we will inform you whether an issue is important so that you can know before picking it up. For high priority bugs, we recommend that you only take it up if you can commit to finishing it reasonably quickly. The reason that we ask to be kept informed is so that we don't find ourselves assigning work and then never hearing back from the contributor. In turn, this allows us to progress with the project at a good pace. Unassigning yourself \u00b6 If you no longer wish to work an issue, that's fine. All we ask is that you let us know. If you unassign yourself from the issue, we don't get notified, so a quick message (no explanation required) will do. We can then assign it to someone else. Where possible, please let us know as soon as possible if you no longer wish to work on an issue. Please also consider that you're finding something difficult on the issue you're assigned to, we're here to help on Slack.","title":"Contributing"},{"location":"development/contributing/#contributing","text":"Thank you for taking an interest in contributing! Please note that by contributing to any of our projects, you are expected to adhere to this contributing document. Please also ensure that you remain familiar with this contributing document as it may change from time to time.","title":"Contributing"},{"location":"development/contributing/#code-of-conduct","text":"By contributing to this project, you are expected to adhere to our Code of Conduct .","title":"Code of Conduct"},{"location":"development/contributing/#ways-to-contribute","text":"Code: adding new features, fixing bugs and general refactoring to name a few Code reviews: either offering to review a pull request on Slack or if you see a pull request and think the code could be improved, feel free to offer suggestions on how to do so. This can help improve our code quality and is much appreciated! Before reviewing code, please ensure you are familiar with and understand our code reviews document Issues and pull requests labelled with needs-repro have yet to be reproduced. If you're able to reproduce it, letting us know would help a lot Our test coverage is low, so we need a lot more tests, particularly the areas that are undertested or not covered at all Documentation: improvements (including fixing typos!) to files such as our READMEs, any wiki page, any of our style guides, comments in source files, this contributing document or the code of conduct . Design: helping to design the UI and UX of the web app through prototypes (such as wireframes and drawings) Feedback: we're eager to find new ways to improve, so please do let us know! Start a new idea discussion on GitHub Triage: help us to triage issues and pull requests In addition to the above, you can get involved in shaping the future of the project over on Slack.","title":"Ways to contribute"},{"location":"development/contributing/#receiving-a-response","text":"We aim to respond to all messages (on Slack and on GitHub) within seven days. Similarly, we aim to review all pull requests within seven days of receiving it in a review state. If you haven't received a response, feel free to mention @knjk04 or get in touch on Slack.","title":"Receiving a response"},{"location":"development/contributing/#open-ended-discussions","text":"Open-ended discussions are best made over our public #help channel on our Slack workspace. Unless specified otherwise, this applies when you're not assigned to the issue at hand. Examples of when to take a discussion over to Slack: If you disagree with an issue (e.g. if you don't think it's needed or there is a better way of doing something) If you would like to make comments, suggestions or amendments to our style guide If you would like to comment on the overall direction of the project The reason for this is because we don't want to make discussions on issues or pull requests longer than they need to be. For example, creating an open-ended discussion on a pull-request code review can distract away from the actual code review and confuse the contributor assigned to the pull request (i.e. it's off-topic).","title":"Open-ended discussions"},{"location":"development/contributing/#before-making-changes","text":"","title":"Before making changes"},{"location":"development/contributing/#tell-us-which-issue-you-want-to-work-on","text":"Note This applies to both code and documentation changes If an issue already exists for what you want to work and it is unassigned, and it is not labelled as blocked , feel free to let us know that you want to work on it. We can then assign you to it. If an issue doesn't already exist, please create one and then let us know that you are happy to work on it. Letting us know which issue you want to work on before working on it helps to minimise the chances of duplicated work.","title":"Tell us which issue you want to work on"},{"location":"development/contributing/#new-contributors-assigned-to-at-most-one-issue-at-a-time","text":"If you have a new contributor (have not yet contributed to the project), we ask that you only request to be assigned to one issue. Only once your corresponding pull has been merged can you request to be assigned to other issues (more than one). The reason for this restriction is because we have had people ask to be assigned to an issue but then, for whatever reason, not work on it. We don't want to find ourselves in a situation where multiple issues are assigned to one person who then does not deliver. We want to keep our project alive at a good pace.","title":"New contributors assigned to at most one issue at a time"},{"location":"development/contributing/#discuss-your-implementation-approach","text":"After having been assigned to a ticket, please discuss your implementation approach with us first before working on it. It may be the case that you make a good change, but it isn't what we are looking for. Moreover, there may be a better way of doing something. This step can help to save both your time and our time in the long run :)","title":"Discuss your implementation approach"},{"location":"development/contributing/#ensure-your-email-address-on-your-commits-are-correct","text":"If your email address that you are committing with does not match the email address associated with your GitHub account, you won't show up as a contributor on our repository or on your profile. In the above image, the contributor's avatar is the same as the avatar on their GitHub profile. In addition, their username (highlighted) is a link to their GitHub profile. This won't be the case if you haven't set things up correctly. You can check the email address in your git config with the following command: 1 $ git config user.email You can then ensure that this matches the email address on your GitHub account (look in 'Settings'). For more information, see GitHub's documentation page on 'Why are my contributions not showing up on my profile?' . See how to rewrite pushed commits to use a different email address .","title":"Ensure your email address on your commits are correct"},{"location":"development/contributing/#workflow","text":"Please follow the process below: Tell us which issue you want to work on Discuss your implementation approach with us Fork the repository Create a new branch off main (unless the corresponding issue says otherwise). Your branch should have a descriptive branch name (that corresponds to the relevant issue) (e.g. add-styleguide ) Please do not use quotation marks or apostrophes in your branch name Bring your branch level with the branch you're going to be branching into before submitting a pull request (we recommend rebasing) i.e. if you're going to be branch off main , then rebase new changes from main onto your branch Submit a pull request to merge into the branch specified on the issue (or main if a branch is not specified)","title":"Workflow"},{"location":"development/contributing/#commit-messages","text":"Use the present tense (e.g. \"add converter\", not \"added converter\") Ensure your commit messages are descriptive (i.e. a commit message should effectively summarise what change(s) you made) In line with this, you may want to break up your contribution into smaller commits Generally speaking, the default GitHub commit messages (e.g. add [file] or update [file] ) are not sufficient","title":"Commit messages"},{"location":"development/contributing/#one-problem-per-patch","text":"For every patch (i.e. pull request) you make, please ensure it solves one problem. If you want to solve multiple problems, please spread them across multiple patches -- one patch per problem. This makes it easier to keep track of what changes were made in what branch or pull request when looking back. Additionally, it makes code reviews go a lot quicker and smoother.","title":"One problem per patch"},{"location":"development/contributing/#syncing-your-fork","text":"You can keep your fork up-to-date by first creating a remote for the upstream and then syncing your fork .","title":"Syncing your fork"},{"location":"development/contributing/#code-contributions","text":"Please adhere to our relevant code style guide(s) for the issue you are working on. Before submitting a pull request, run the unit tests locally and ensure they pass.","title":"Code contributions"},{"location":"development/contributing/#writing-tests","text":"Generally speaking, if you're working on a new feature (any issue with the enhancement label ) or fixing a bug , please also write tests. If you need a hand with this, we can help. We highly recommend following a test-driven development approach.","title":"Writing tests"},{"location":"development/contributing/#new-files","text":"If you're adding a new file, please ensure to copy the contents of our copyright file verbatim (use the latest version on the main branch).","title":"New files"},{"location":"development/contributing/#pull-requests","text":"If you've opened a pull request but it is not yet ready for a review, please convert it to a draft. Otherwise, we may help you out by adding to your branch while you're also working on it if the changes needed are small or if the work needs to be completed quickly (e.g. if it is a high priority bug or if it is blocking other work). The same applies for pull requests where we've requested changes -- mark it as a draft until you're ready for another review.","title":"Pull requests"},{"location":"development/contributing/#merge-conflicts","text":"We expect you to resolve any merge conflicts that appear when you have a pull request. This includes when you first create the pull request and at any point later on if merge conflicts appear before your pull request is merged. This is to minimise the time spent reviewers spend reviewing pull requests, but it is may also provide you with the opportunity to change or adapt your work based on new changes.","title":"Merge conflicts"},{"location":"development/contributing/#resolving-conversations","text":"It is best to leave resolving a conversation (e.g. a review comment) to the reviewer that created it. This way, they can check for themselves whether the suggestion was implemented as desired.","title":"Resolving conversations"},{"location":"development/contributing/#stale-issues-pull-requests","text":"If you have been assigned to an issue and we have not heard back to you for a week (either through a message or seeing a pull request you made), we will send a friendly message asking whether everything is OK and whether you need a hand. If you need more time, the work is non-urgent and is not blocking anyone, that's completely fine, just let us know. If possible, try to let us know how long it will take you to submit a ready-to-review pull request. If we have not heard back from you one week after our friendly reminder (i.e. two weeks after you were first assigned to the issue), we will unassign you from the issue. This is so that we can assign someone else to the issue. Pull requests are similar. We will send a friendly reminder after one week of receiving the pull request or receiving your last message. If we don't hear back from you, we will close the pull request and label it as stale . For urgent work, such as fixing important bugs or work that is blocking others, a similar process will be followed but with shorter timescales. Exactly how long depends on the severity of the stale work. Where possible, we will inform you whether an issue is important so that you can know before picking it up. For high priority bugs, we recommend that you only take it up if you can commit to finishing it reasonably quickly. The reason that we ask to be kept informed is so that we don't find ourselves assigning work and then never hearing back from the contributor. In turn, this allows us to progress with the project at a good pace.","title":"Stale issues &amp; pull requests"},{"location":"development/contributing/#unassigning-yourself","text":"If you no longer wish to work an issue, that's fine. All we ask is that you let us know. If you unassign yourself from the issue, we don't get notified, so a quick message (no explanation required) will do. We can then assign it to someone else. Where possible, please let us know as soon as possible if you no longer wish to work on an issue. Please also consider that you're finding something difficult on the issue you're assigned to, we're here to help on Slack.","title":"Unassigning yourself"},{"location":"development/how-to/backend-postman/","text":"With the HTTP verb set as POST , connect to localhost:8080/login . In the body of the request, have the following raw JSON: 1 2 3 4 { \"username\" : \"user@user.user\" , \"password\" : \"password\" } You'll get back a header that contains a JWT token. For any requests that require authentication (currently all apart from logging in, logging out and registering), you will need to pass this token in so that the server knows it can trust you as it has already authenticated you.","title":"Connect to the backend with Postman"},{"location":"development/how-to/rewrite-pushed-commits/","text":"Rewriting pushed commits with a different email address \u00b6 Step 1: While on your feature branch, run $ git rebase -i HEAD~n where n are the number of commits you would like to change This will then open your commits in the default text editor for Git (which may be Vim or Vi, so you may wish to change this if you prefer a different editor). Step 2: Change the lines with 'pick' to 'edit' and then save and quit the file Step 3: $ git commit --amend --author= \"[Your name] [your email address as shown on GitHub]\" --no-edit Step 4: $ git rebase --continue You'll need to run steps 3 and 4 n number of times, where n represents the number of commits that you are rewriting. Step 5: Once you've finished with the rebase, force push: $ git push -f origin [your-branch-name]","title":"Rewriting pushed commits with a different email address"},{"location":"development/how-to/rewrite-pushed-commits/#rewriting-pushed-commits-with-a-different-email-address","text":"Step 1: While on your feature branch, run $ git rebase -i HEAD~n where n are the number of commits you would like to change This will then open your commits in the default text editor for Git (which may be Vim or Vi, so you may wish to change this if you prefer a different editor). Step 2: Change the lines with 'pick' to 'edit' and then save and quit the file Step 3: $ git commit --amend --author= \"[Your name] [your email address as shown on GitHub]\" --no-edit Step 4: $ git rebase --continue You'll need to run steps 3 and 4 n number of times, where n represents the number of commits that you are rewriting. Step 5: Once you've finished with the rebase, force push: $ git push -f origin [your-branch-name]","title":"Rewriting pushed commits with a different email address"},{"location":"development/how-to/troubleshoot/","text":"A look at common errors with running the app locally and how to fix them. If even are going through these steps you are unable to run the app, let us know over Slack or by creating a new Q&A GitHub discussion . Cannot find log statements or the entities do not have constructors (Lombok errors) \u00b6 You may find lots of errors for things like the log statements, or the entities not having constructors. Below, you can find instructions on how to fix this for IntelliJ and Eclipse. IntelliJ \u00b6 To remove the errors in IntelliJ, install the Lombok plugin and enable annotation processing. This can be done either in the popup window that appears after installing the Lombok plugin or by checking the 'Enable annotation processing' checkbox in Settings > Build, Execution, Deployment > Compiler > Annotation Processors. Note that in IntelliJ Ultimate 2021.1, Lombok comes pre-bundled so you don't need to install the plugin. Eclipse \u00b6 In Eclipse, you will need to run Maven install before running the project (right click anywhere in the pom.xml and select Run as > Maven install). Flyway \u00b6 FlywayException: Validate failed \u00b6 1 2 Caused by: org.flywaydb.core.api.FlywayException: Validate failed: Migration checksum mismatch for migration version If you see the error above, then you need to run flyway clean: In IntelliJ, go to Maven > Plugins > flyway > flyway:clean Alternatively, run ./mvnw flyway:clean (Unix) or mvnw.cmd flyway:clean (Windows) at the root of the project (or in the backend/ directory if it's 0.2.0) Docker \u00b6 Note We are now using PostgreSQL instead of MySQL, but the fixes below may still apply SQL communications link failure \u00b6 1 2 3 4 5 SQL State : 08S01 Error Code : 0 Message : Communications link failure The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server. If you see the SQL error above, please ensure that you have successfully ran the database before running the app (see ). For this, you will need to run Docker (better) or your own MySQL server locally (see the instructions in the README ). Bind for 0.0.0.0:3306 failed: port is already allocated \u00b6 If after running docker-compose up at the root of the project you get an error similar to the following: 1 2 3 4 5 6 7 8 9 C:\\Users\\karan\\git\\book-project>docker-compose up Removing book-project_db_1 Recreating db425df37b9d_book-project_db_1 ... Recreating db425df37b9d_book-project_db_1 ... error ERROR: for db425df37b9d_book-project_db_1 Cannot start service db: Ports are not available: listen tcp 0.0.0.0:3306: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted. ERROR: for db Cannot start service db: Ports are not available: listen tcp 0.0.0.0:3306: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted. ERROR: Encountered errors while bringing up the project. then another service is using port 3306. If you see the Found orphan containers warning, then run docker-compose up --remove-orphans . Then, continue with the following steps. Check if a running container is using the port: After running docker container ls , check to see if port 3306 is being used. If so, run docker container rm -f to stop and remove the container. In the above example, you would run docker container rm -f 816 . If this doesn't work, you can see some more troubleshooting tips below. A different service is running On Windows: - Open cmd with administrator privileges - Run netstat -ano - Use ctrl + f to find the process that is running on port 3306 . Make a note of the PID number (right-hand column) - Run taskkill /PID <PID> /F . For example, if the PID you noted above was 4504 , you would type in taskkill /PID 4504 /F Building the backend \u00b6 If you're having issues with building the app, try deleting Maven's .m2 folder. This can usually be found in /home/<username>/.m2 Running the backend \u00b6 Failed to determine a suitable driver class \u00b6 If you're running the app from within your IDE and you get the 'Failed to determine a suitable driver class', ensure that you have passed in the profile you want to run (e.g. dev) into the VM options of your IDE. The screenshot above shows how to set the dev profile in IntelliJ. Application failed to start \u00b6 This error occurs when another process (e.g. another Spring Boot application) is using port 8080. 1 2 3 4 5 6 7 8 9 10 11 *************************** APPLICATION FAILED TO START *************************** Description: Web server failed to start. Port 1234 was already in use. Action: Identify and stop the process that's listening on port 1234 or configure this application to listen on another port. If you see an 'Application failed to start' error like the above, you can either try to kill the process that is using that port or, as a temporary measure, change the server port in resources/application.properties by adding the following line: 1 server.port=1234 You can choose whatever free port you want. If you follow this approach, please ensure you revert the change before committing.","title":"Troubleshoot"},{"location":"development/how-to/troubleshoot/#cannot-find-log-statements-or-the-entities-do-not-have-constructors-lombok-errors","text":"You may find lots of errors for things like the log statements, or the entities not having constructors. Below, you can find instructions on how to fix this for IntelliJ and Eclipse.","title":"Cannot find log statements or the entities do not have constructors (Lombok errors)"},{"location":"development/how-to/troubleshoot/#intellij","text":"To remove the errors in IntelliJ, install the Lombok plugin and enable annotation processing. This can be done either in the popup window that appears after installing the Lombok plugin or by checking the 'Enable annotation processing' checkbox in Settings > Build, Execution, Deployment > Compiler > Annotation Processors. Note that in IntelliJ Ultimate 2021.1, Lombok comes pre-bundled so you don't need to install the plugin.","title":"IntelliJ"},{"location":"development/how-to/troubleshoot/#eclipse","text":"In Eclipse, you will need to run Maven install before running the project (right click anywhere in the pom.xml and select Run as > Maven install).","title":"Eclipse"},{"location":"development/how-to/troubleshoot/#flyway","text":"","title":"Flyway"},{"location":"development/how-to/troubleshoot/#flywayexception-validate-failed","text":"1 2 Caused by: org.flywaydb.core.api.FlywayException: Validate failed: Migration checksum mismatch for migration version If you see the error above, then you need to run flyway clean: In IntelliJ, go to Maven > Plugins > flyway > flyway:clean Alternatively, run ./mvnw flyway:clean (Unix) or mvnw.cmd flyway:clean (Windows) at the root of the project (or in the backend/ directory if it's 0.2.0)","title":"FlywayException: Validate failed"},{"location":"development/how-to/troubleshoot/#docker","text":"Note We are now using PostgreSQL instead of MySQL, but the fixes below may still apply","title":"Docker"},{"location":"development/how-to/troubleshoot/#sql-communications-link-failure","text":"1 2 3 4 5 SQL State : 08S01 Error Code : 0 Message : Communications link failure The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server. If you see the SQL error above, please ensure that you have successfully ran the database before running the app (see ). For this, you will need to run Docker (better) or your own MySQL server locally (see the instructions in the README ).","title":"SQL communications link failure"},{"location":"development/how-to/troubleshoot/#bind-for-00003306-failed-port-is-already-allocated","text":"If after running docker-compose up at the root of the project you get an error similar to the following: 1 2 3 4 5 6 7 8 9 C:\\Users\\karan\\git\\book-project>docker-compose up Removing book-project_db_1 Recreating db425df37b9d_book-project_db_1 ... Recreating db425df37b9d_book-project_db_1 ... error ERROR: for db425df37b9d_book-project_db_1 Cannot start service db: Ports are not available: listen tcp 0.0.0.0:3306: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted. ERROR: for db Cannot start service db: Ports are not available: listen tcp 0.0.0.0:3306: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted. ERROR: Encountered errors while bringing up the project. then another service is using port 3306. If you see the Found orphan containers warning, then run docker-compose up --remove-orphans . Then, continue with the following steps. Check if a running container is using the port: After running docker container ls , check to see if port 3306 is being used. If so, run docker container rm -f to stop and remove the container. In the above example, you would run docker container rm -f 816 . If this doesn't work, you can see some more troubleshooting tips below. A different service is running On Windows: - Open cmd with administrator privileges - Run netstat -ano - Use ctrl + f to find the process that is running on port 3306 . Make a note of the PID number (right-hand column) - Run taskkill /PID <PID> /F . For example, if the PID you noted above was 4504 , you would type in taskkill /PID 4504 /F","title":"Bind for 0.0.0.0:3306 failed: port is already allocated"},{"location":"development/how-to/troubleshoot/#building-the-backend","text":"If you're having issues with building the app, try deleting Maven's .m2 folder. This can usually be found in /home/<username>/.m2","title":"Building the backend"},{"location":"development/how-to/troubleshoot/#running-the-backend","text":"","title":"Running the backend"},{"location":"development/how-to/troubleshoot/#failed-to-determine-a-suitable-driver-class","text":"If you're running the app from within your IDE and you get the 'Failed to determine a suitable driver class', ensure that you have passed in the profile you want to run (e.g. dev) into the VM options of your IDE. The screenshot above shows how to set the dev profile in IntelliJ.","title":"Failed to determine a suitable driver class"},{"location":"development/how-to/troubleshoot/#application-failed-to-start","text":"This error occurs when another process (e.g. another Spring Boot application) is using port 8080. 1 2 3 4 5 6 7 8 9 10 11 *************************** APPLICATION FAILED TO START *************************** Description: Web server failed to start. Port 1234 was already in use. Action: Identify and stop the process that's listening on port 1234 or configure this application to listen on another port. If you see an 'Application failed to start' error like the above, you can either try to kill the process that is using that port or, as a temporary measure, change the server port in resources/application.properties by adding the following line: 1 server.port=1234 You can choose whatever free port you want. If you follow this approach, please ensure you revert the change before committing.","title":"Application failed to start"},{"location":"development/maintaining/code-reviews/","text":"Code reviews \u00b6 This document outlines the process of code reviews. This serves as a guideline for reviewers, as we want to create a standardized way of reviewing code. However, this could also be useful for contributors that want to understand the process. We want to be as transparent as possible. Process \u00b6 Look at the pull request (PR) description to ensure that the PR assignee correctly filled out the template. For an example of an acceptable PR description, you can refer to any of the latest merged in PRs. The PR checklist is also there to help you. Run the code. Even if the change looks small and isolated, still run it! There may be unintended side effects. Open the code in an IDE. Look at the diff to see what was changed and look for those parts of code in an IDE. Doing so can help find areas of improvement that were hard to notice within GitHub's diff window (e.g. unused variables) Things to look for as a reviewer \u00b6 Style guide violations Please ensure you are familiar with the relevant style guide(s). Areas to improve readability (e.g. does the name of the method accurately describe what it does? Can a comment be replaced with extracting a block of code into a method? Etc.) Areas to improve efficiency Code duplication (e.g. has the contributor redefined a utility method?) Grammatical mistakes If you see a test fail that works when you re-run it, it would be best not to ignore it. Look into why that may have failed. This list is non-exhaustive and is only indicative of common problems that arise. Etiquette \u00b6 In line with our code of conduct , always be welcoming. Tips: - Acknowledge the PR and tell them when you're able to review it (or that you'll review it shortly if you don't yet know when you'll be able to review it) - Always thank the contributor when they first create the PR - Politely offer constructive criticism. - Point out at least some of the good things as well if you're offering lots of feedback on areas to improve - Always thank the contributor again when merging the PR (if you have permission) Things to avoid: - Being condescending (e.g. don't use ellipsis). We try hard to be supportive of people with all abilities, from beginner to pro. - Reacting if you think someone has violated the code of conduct. It is best to speak to the maintainer to discuss the matter rather than taking it into your own hands while you're angry, upset or in another emotional state. As a code reviewer, you'll be representing the Book Project, so you must conduct yourself to the highest standard of our expectations. Timelines \u00b6 This section only applies if you are the primary reviewer (e.g. you were asked to review some code). When to review a PR by \u00b6 If possible, try to review the PR within seven days of when the assignee created it. This guidance also applies to updates. If a contributor updates a pull request, try to get back to them within seven days. We recommend reviewing the PR as soon as possible for high-priority bug fixes since we must merge in patches promptly. If you are do not have a sufficient amount of time to review a PR, please inform the project maintainer (e.g. over Slack) so that they or someone else can review it. Providing updates \u00b6 As a lot of us are busy people (jobs, family, etc.), it's understandable if seven days isn't always possible. In this case, we ask that you still contact the contributor within seven days with an update on when you will able to review it (or that you'll look into it shortly if you don't yet know when). Regular updates to keep the contributor informed that you're looking into the PR is essential.","title":"Code reviews"},{"location":"development/maintaining/code-reviews/#code-reviews","text":"This document outlines the process of code reviews. This serves as a guideline for reviewers, as we want to create a standardized way of reviewing code. However, this could also be useful for contributors that want to understand the process. We want to be as transparent as possible.","title":"Code reviews"},{"location":"development/maintaining/code-reviews/#process","text":"Look at the pull request (PR) description to ensure that the PR assignee correctly filled out the template. For an example of an acceptable PR description, you can refer to any of the latest merged in PRs. The PR checklist is also there to help you. Run the code. Even if the change looks small and isolated, still run it! There may be unintended side effects. Open the code in an IDE. Look at the diff to see what was changed and look for those parts of code in an IDE. Doing so can help find areas of improvement that were hard to notice within GitHub's diff window (e.g. unused variables)","title":"Process"},{"location":"development/maintaining/code-reviews/#things-to-look-for-as-a-reviewer","text":"Style guide violations Please ensure you are familiar with the relevant style guide(s). Areas to improve readability (e.g. does the name of the method accurately describe what it does? Can a comment be replaced with extracting a block of code into a method? Etc.) Areas to improve efficiency Code duplication (e.g. has the contributor redefined a utility method?) Grammatical mistakes If you see a test fail that works when you re-run it, it would be best not to ignore it. Look into why that may have failed. This list is non-exhaustive and is only indicative of common problems that arise.","title":"Things to look for as a reviewer"},{"location":"development/maintaining/code-reviews/#etiquette","text":"In line with our code of conduct , always be welcoming. Tips: - Acknowledge the PR and tell them when you're able to review it (or that you'll review it shortly if you don't yet know when you'll be able to review it) - Always thank the contributor when they first create the PR - Politely offer constructive criticism. - Point out at least some of the good things as well if you're offering lots of feedback on areas to improve - Always thank the contributor again when merging the PR (if you have permission) Things to avoid: - Being condescending (e.g. don't use ellipsis). We try hard to be supportive of people with all abilities, from beginner to pro. - Reacting if you think someone has violated the code of conduct. It is best to speak to the maintainer to discuss the matter rather than taking it into your own hands while you're angry, upset or in another emotional state. As a code reviewer, you'll be representing the Book Project, so you must conduct yourself to the highest standard of our expectations.","title":"Etiquette"},{"location":"development/maintaining/code-reviews/#timelines","text":"This section only applies if you are the primary reviewer (e.g. you were asked to review some code).","title":"Timelines"},{"location":"development/maintaining/code-reviews/#when-to-review-a-pr-by","text":"If possible, try to review the PR within seven days of when the assignee created it. This guidance also applies to updates. If a contributor updates a pull request, try to get back to them within seven days. We recommend reviewing the PR as soon as possible for high-priority bug fixes since we must merge in patches promptly. If you are do not have a sufficient amount of time to review a PR, please inform the project maintainer (e.g. over Slack) so that they or someone else can review it.","title":"When to review a PR by"},{"location":"development/maintaining/code-reviews/#providing-updates","text":"As a lot of us are busy people (jobs, family, etc.), it's understandable if seven days isn't always possible. In this case, we ask that you still contact the contributor within seven days with an update on when you will able to review it (or that you'll look into it shortly if you don't yet know when). Regular updates to keep the contributor informed that you're looking into the PR is essential.","title":"Providing updates"},{"location":"development/maintaining/core-team/","text":"Core Team \u00b6 Everyone who commits to the Book Project is considered a part of our team. The core team refers to those who beyond committing to the project and have added responsibilities to help maintain and push the project forward. All those in the core are held to the highest standard of our code of conduct . In particular, all maintainers must be welcoming and inclusive to all at all times. If they are not, their role as a maintainer could be revoked. Project owner \u00b6 Karan ( @knjk04 ) first started this project and is the owner of the repository. As the project owner, this role also includes the maintainer role. Karan is active in committing to the project, reviewing code and helping others on the project over Slack. Karan has the final say on decisions and is in responsible for the overall direction of the project. However, Karan is always open to new ideas and thoughts. If you think something could be done better, speak up! While we cannot guarantee that we will take your suggestion forward, we can promise that your feedback is valuable and that you will be responded to, regardless of whether we take up your suggestion. If we don't take your suggestion forward, we'll also let you know why. Should you have any concerns about any of the maintainers, Karan is the person to speak to. You can message him privately on Slack. Maintainers \u00b6 Current maintainers \u00b6 Karan (@knjk04) Previous maintainers \u00b6 Amit Frontend team \u00b6 Riva Our frontend team focuses on improving the quality of our frontend. This encompasses reviewing pull requests, having a say in frontend decisions and ensuring our frontend code is maintainable.","title":"Core team"},{"location":"development/maintaining/core-team/#core-team","text":"Everyone who commits to the Book Project is considered a part of our team. The core team refers to those who beyond committing to the project and have added responsibilities to help maintain and push the project forward. All those in the core are held to the highest standard of our code of conduct . In particular, all maintainers must be welcoming and inclusive to all at all times. If they are not, their role as a maintainer could be revoked.","title":"Core Team"},{"location":"development/maintaining/core-team/#project-owner","text":"Karan ( @knjk04 ) first started this project and is the owner of the repository. As the project owner, this role also includes the maintainer role. Karan is active in committing to the project, reviewing code and helping others on the project over Slack. Karan has the final say on decisions and is in responsible for the overall direction of the project. However, Karan is always open to new ideas and thoughts. If you think something could be done better, speak up! While we cannot guarantee that we will take your suggestion forward, we can promise that your feedback is valuable and that you will be responded to, regardless of whether we take up your suggestion. If we don't take your suggestion forward, we'll also let you know why. Should you have any concerns about any of the maintainers, Karan is the person to speak to. You can message him privately on Slack.","title":"Project owner"},{"location":"development/maintaining/core-team/#maintainers","text":"","title":"Maintainers"},{"location":"development/maintaining/core-team/#current-maintainers","text":"Karan (@knjk04)","title":"Current maintainers"},{"location":"development/maintaining/core-team/#previous-maintainers","text":"Amit","title":"Previous maintainers"},{"location":"development/maintaining/core-team/#frontend-team","text":"Riva Our frontend team focuses on improving the quality of our frontend. This encompasses reviewing pull requests, having a say in frontend decisions and ensuring our frontend code is maintainable.","title":"Frontend team"},{"location":"development/maintaining/maintainer/","text":"Becoming a maintainer \u00b6 If Karan, our project owner, believes you are already operating at our maintainer standard, he may contact you to ask whether you would like to become a maintainer. If this is the case, we will follow our process of agreeing on the details on how frequently you are available to help. If you were not approached and would like to become a maintainer, feel free to message Karan on Slack (@knjk04), either privately or on the Slack #book-project channel. If we say no, we will be constructive by telling you what you would need to do to get there (e.g. contribute for longer to gain further trust). Please do not feel disheartened if we say no. Think of it as 'not yet' rather than 'never'. If you ask Karan publicly on Slack, the assumption is that you are happy for a public response. Why we have maintainers \u00b6 While everyone can help shape the direction of the project, this is particularly true of maintainers, as the owner and other maintainers may lean on each other. Our maintainers also help us push the project forward at a good pace. Responsibilities \u00b6 We expect our maintainers to make regular, meaningful commits to the project. 'Regular' is intentionally vague as we appreciate that different people have different levels of free time that they can spend on the project. Therefore, this is something that should be agreed upon with the project owner, Karan. For example, if you can only contribute once a month, that may be fine. When a build breaks or when we have high-priority bugs to fix, we depend on the owner and maintainers to help create a patch quickly. In addition to regularly committing, we expect our maintainers to review pull requests regularly. In general, we try to review pull requests within seven days (regular days, not working days) of having received them. If this is not feasible for you, please discuss this with the owner as we are somewhat flexible on this. Lastly, we have an active Slack workspace and GitHub discussions area where we can provide help to committers. We expect maintainers to be active here to help others. We don't expect our maintainers always to be online, but to be responsive to messages directed towards them and undirected messages that they can help with. As a rule of thumb, we would expect maintainers to reply within seven days. Try to keep us informed of where holidays and other engagements affect your availability. As a regular committer, we may give them access rights to commit to the project. However, they are trusted not to do so unless until we have first reviewed their work. This also includes changes to the wiki We appreciate this is a large commitment to make, so we highly value the time and effort of all of our maintainers to help push the project forward. Commitment \u00b6 If Karan has offered you the position of becoming a maintainer, we will ask you the following questions. These questions help us both set the expectations. As explained in the core team document , we appreciate that becoming a maintainer is a big commitment (and we are very appreciative of our maintainers). We want to be flexible to respect your other commitments. If your availability changes, that's fine. The important thing is to let us know so that we can continue to be respectful of your time. At the very minimum, how frequently are you able to contribute (e.g. once a week, once a fortnight, etc.)? What is the main area that you will be able to help with (e.g. Spring, React, Docker, documentation, design etc.)? At the minimum, how often can you help with reviewing pull requests (we aim to review all pull requests within at most seven days)? Are you able to help fix failing builds or when we have high-priority bugs to fix regularly? If so, how often (e.g. weekly, fortnightly)? Are you able to help others and respond to others on our Slack workspace (we aim to respond to messages within at most seven days)? Revoking maintainer privileges \u00b6 If a maintainer becomes unresponsive for an extended period, or if they violate our code of conduct or responsibility, they can have their role revoked. While this may seem daunting, this should not come as a surprise as we should have already discussed this with you.","title":"Becoming a maintainer"},{"location":"development/maintaining/maintainer/#becoming-a-maintainer","text":"If Karan, our project owner, believes you are already operating at our maintainer standard, he may contact you to ask whether you would like to become a maintainer. If this is the case, we will follow our process of agreeing on the details on how frequently you are available to help. If you were not approached and would like to become a maintainer, feel free to message Karan on Slack (@knjk04), either privately or on the Slack #book-project channel. If we say no, we will be constructive by telling you what you would need to do to get there (e.g. contribute for longer to gain further trust). Please do not feel disheartened if we say no. Think of it as 'not yet' rather than 'never'. If you ask Karan publicly on Slack, the assumption is that you are happy for a public response.","title":"Becoming a maintainer"},{"location":"development/maintaining/maintainer/#why-we-have-maintainers","text":"While everyone can help shape the direction of the project, this is particularly true of maintainers, as the owner and other maintainers may lean on each other. Our maintainers also help us push the project forward at a good pace.","title":"Why we have maintainers"},{"location":"development/maintaining/maintainer/#responsibilities","text":"We expect our maintainers to make regular, meaningful commits to the project. 'Regular' is intentionally vague as we appreciate that different people have different levels of free time that they can spend on the project. Therefore, this is something that should be agreed upon with the project owner, Karan. For example, if you can only contribute once a month, that may be fine. When a build breaks or when we have high-priority bugs to fix, we depend on the owner and maintainers to help create a patch quickly. In addition to regularly committing, we expect our maintainers to review pull requests regularly. In general, we try to review pull requests within seven days (regular days, not working days) of having received them. If this is not feasible for you, please discuss this with the owner as we are somewhat flexible on this. Lastly, we have an active Slack workspace and GitHub discussions area where we can provide help to committers. We expect maintainers to be active here to help others. We don't expect our maintainers always to be online, but to be responsive to messages directed towards them and undirected messages that they can help with. As a rule of thumb, we would expect maintainers to reply within seven days. Try to keep us informed of where holidays and other engagements affect your availability. As a regular committer, we may give them access rights to commit to the project. However, they are trusted not to do so unless until we have first reviewed their work. This also includes changes to the wiki We appreciate this is a large commitment to make, so we highly value the time and effort of all of our maintainers to help push the project forward.","title":"Responsibilities"},{"location":"development/maintaining/maintainer/#commitment","text":"If Karan has offered you the position of becoming a maintainer, we will ask you the following questions. These questions help us both set the expectations. As explained in the core team document , we appreciate that becoming a maintainer is a big commitment (and we are very appreciative of our maintainers). We want to be flexible to respect your other commitments. If your availability changes, that's fine. The important thing is to let us know so that we can continue to be respectful of your time. At the very minimum, how frequently are you able to contribute (e.g. once a week, once a fortnight, etc.)? What is the main area that you will be able to help with (e.g. Spring, React, Docker, documentation, design etc.)? At the minimum, how often can you help with reviewing pull requests (we aim to review all pull requests within at most seven days)? Are you able to help fix failing builds or when we have high-priority bugs to fix regularly? If so, how often (e.g. weekly, fortnightly)? Are you able to help others and respond to others on our Slack workspace (we aim to respond to messages within at most seven days)?","title":"Commitment"},{"location":"development/maintaining/maintainer/#revoking-maintainer-privileges","text":"If a maintainer becomes unresponsive for an extended period, or if they violate our code of conduct or responsibility, they can have their role revoked. While this may seem daunting, this should not come as a surprise as we should have already discussed this with you.","title":"Revoking maintainer privileges"},{"location":"development/maintaining/triager/","text":"Prerequisites \u00b6 After you have had at least two pull requests merged in (so that you understand our working process), you can help us triage issues and pull requests. You will also need to join our Slack workspace. What it involves \u00b6 Helping to add labels to issues by following our labelling conventions Checking up on people who have been assigned seven days ago to an issue but have not provided an update (which may be on Slack) or created a pull request Sending short thank you messages when someone creates a pull request and informing them that we will review it shortly Informing new contributors that we can assign them to one issue at a time This list may change over time. If it does, we'll check in with you to ensure you are still happy to be a triager. As a triager, you are representing our project. Consequently, we hold you to high standards and expect you to adhere to our code of conduct at all times (be kind and welcoming). You will also need to stay up-to-date with our code of conduct and contributing guidelines. How to become a triager \u00b6 Message 'Karan Kumar' (@ knjk04 ) on Slack (publicly or privately) and confirm that you have read and agree to this document. Removing a triager \u00b6 In the following (non-exhaustive) exceptional circumstances, we may remove you as a triager: Violating the code of conduct or contributing guidelines Abusing the role Lack of participation for more than two months Acknowledgements \u00b6 We have adapted Express.JS Express Triager Guide .","title":"Becoming a triager"},{"location":"development/maintaining/triager/#prerequisites","text":"After you have had at least two pull requests merged in (so that you understand our working process), you can help us triage issues and pull requests. You will also need to join our Slack workspace.","title":"Prerequisites"},{"location":"development/maintaining/triager/#what-it-involves","text":"Helping to add labels to issues by following our labelling conventions Checking up on people who have been assigned seven days ago to an issue but have not provided an update (which may be on Slack) or created a pull request Sending short thank you messages when someone creates a pull request and informing them that we will review it shortly Informing new contributors that we can assign them to one issue at a time This list may change over time. If it does, we'll check in with you to ensure you are still happy to be a triager. As a triager, you are representing our project. Consequently, we hold you to high standards and expect you to adhere to our code of conduct at all times (be kind and welcoming). You will also need to stay up-to-date with our code of conduct and contributing guidelines.","title":"What it involves"},{"location":"development/maintaining/triager/#how-to-become-a-triager","text":"Message 'Karan Kumar' (@ knjk04 ) on Slack (publicly or privately) and confirm that you have read and agree to this document.","title":"How to become a triager"},{"location":"development/maintaining/triager/#removing-a-triager","text":"In the following (non-exhaustive) exceptional circumstances, we may remove you as a triager: Violating the code of conduct or contributing guidelines Abusing the role Lack of participation for more than two months","title":"Removing a triager"},{"location":"development/maintaining/triager/#acknowledgements","text":"We have adapted Express.JS Express Triager Guide .","title":"Acknowledgements"},{"location":"development/styleguides/java-styleguide/","text":"Java Style guide \u00b6 This document may change Please ensure that you remain familiar with this document as it may change from time to time. We have adopted Google's Java style guide . In addition, we have listed our own rules below. All source files should start with our copyright notice attached verbatim. This copyright notice can be found at the root of the respective repository. IDE integration \u00b6 Recommended IntelliJ plugin: google-java-format Lombok \u00b6 Explicitly exclude (or only manually include) all lazy loaded fields in JPA entities Ensure @NoArgsConstructor is used if @AllArgsConstructor is used, as entities need a public or protected no-arg constructor Do not the @EqualsAndHashCode annotation as we don't want Lombok to generate equals() and hashCode() methods for JPA entities Do not use the @Data annotation for the same reason as above For more information, read this article on some Lombok pitfalls . JUnit tests \u00b6 Use AssertJ \u00b6 For assertions and assumptions, we're using AssertJ. We find this to be more readable (it flows nicer as it reads like a sentence) and it's easier to have a consistent team style. Given/when/then pattern \u00b6 The pattern we follow for JUnit tests are given/when/then. For example, given some input some setup, when an action occurs, then assert as desired. Concrete example: 1 2 3 4 5 6 7 8 9 10 11 12 @Test void errorShownWhenEmailInUse () { // given userRepository . save ( VALID_TEST_USER ); EmailField emailField = _get ( EmailField . class , spec -> spec . withId ( \"email\" )); // when _setValue ( emailField , VALID_TEST_USER . getEmail ()); // then assertThat ( emailField . getErrorMessage ()). isNotBlank (); } In general, we add comments to separate out the given, when and then sections. We find that this greatly improves readability. Assert all for multiple assertions \u00b6 If a test method needs multiple assertions, assertSoftly() should be used. Otherwise, lazy evaluation is used. For example, if you had two assertions, and both assertions fail, you will not know about the second assertion failing until you have fixed the first assertion.","title":"Java Style Guide"},{"location":"development/styleguides/java-styleguide/#java-style-guide","text":"This document may change Please ensure that you remain familiar with this document as it may change from time to time. We have adopted Google's Java style guide . In addition, we have listed our own rules below. All source files should start with our copyright notice attached verbatim. This copyright notice can be found at the root of the respective repository.","title":"Java Style guide"},{"location":"development/styleguides/java-styleguide/#ide-integration","text":"Recommended IntelliJ plugin: google-java-format","title":"IDE integration"},{"location":"development/styleguides/java-styleguide/#lombok","text":"Explicitly exclude (or only manually include) all lazy loaded fields in JPA entities Ensure @NoArgsConstructor is used if @AllArgsConstructor is used, as entities need a public or protected no-arg constructor Do not the @EqualsAndHashCode annotation as we don't want Lombok to generate equals() and hashCode() methods for JPA entities Do not use the @Data annotation for the same reason as above For more information, read this article on some Lombok pitfalls .","title":"Lombok"},{"location":"development/styleguides/java-styleguide/#junit-tests","text":"","title":"JUnit tests"},{"location":"development/styleguides/java-styleguide/#use-assertj","text":"For assertions and assumptions, we're using AssertJ. We find this to be more readable (it flows nicer as it reads like a sentence) and it's easier to have a consistent team style.","title":"Use AssertJ"},{"location":"development/styleguides/java-styleguide/#givenwhenthen-pattern","text":"The pattern we follow for JUnit tests are given/when/then. For example, given some input some setup, when an action occurs, then assert as desired. Concrete example: 1 2 3 4 5 6 7 8 9 10 11 12 @Test void errorShownWhenEmailInUse () { // given userRepository . save ( VALID_TEST_USER ); EmailField emailField = _get ( EmailField . class , spec -> spec . withId ( \"email\" )); // when _setValue ( emailField , VALID_TEST_USER . getEmail ()); // then assertThat ( emailField . getErrorMessage ()). isNotBlank (); } In general, we add comments to separate out the given, when and then sections. We find that this greatly improves readability.","title":"Given/when/then pattern"},{"location":"development/styleguides/java-styleguide/#assert-all-for-multiple-assertions","text":"If a test method needs multiple assertions, assertSoftly() should be used. Otherwise, lazy evaluation is used. For example, if you had two assertions, and both assertions fail, you will not know about the second assertion failing until you have fixed the first assertion.","title":"Assert all for multiple assertions"},{"location":"development/styleguides/react-styleguide/","text":"React Style guide \u00b6 We have adopted Airbnb's React/JSX style guide .","title":"React Style Guide"},{"location":"development/styleguides/react-styleguide/#react-style-guide","text":"We have adopted Airbnb's React/JSX style guide .","title":"React  Style guide"},{"location":"development/styleguides/typescript-styleguide/","text":"TypeScript Style guide \u00b6 We have adopted Google's TypeScript style guide . All source files should start with our copyright notice attached verbatim. This copyright notice can be found at the root of the respective repository.","title":"TypeScript Style Guide"},{"location":"development/styleguides/typescript-styleguide/#typescript-style-guide","text":"We have adopted Google's TypeScript style guide . All source files should start with our copyright notice attached verbatim. This copyright notice can be found at the root of the respective repository.","title":"TypeScript Style guide"}]}